on load:
	load yaml "plugins/ParrySurvivalGames/Players.yml" as "Players"




function power(base: number, exponent: number) :: number:
	set {_result} to 1
	loop {_exponent} times:
		set {_result} to ({_result} * {_base})
	return {_result}

function g(RD: number) :: number:
	set {_result} to (1 / sqrt(1 + (3 * ({_RD} * {_RD})) / (3.14 * 3.14)))
	return {_result}

function E(R: number, OpponentR: number, g: number) :: number:
	set {_result} to (1 / (1 + 10 ^ (-1 *({_g} * ({_R} - {_OpponentR})) / 400)))
	return {_result}

function updateRD(RD: number, dSquared: number) :: number:
	set {_RD_new} to (1 / sqrt((1 / ({_RD} * {_RD})) + (1 / {_dSquared})))
	
	# Ensure RD does not go above the upper limit (e.g., 350)
	if {_RD_new} > 125:
		set {_RD_new} to 125
	
	if {_RD_new} < 40:
		set {_RD_new} to 40
	
	return {_RD_new}

function calculateNewRating(player: offlineplayer, OpponentR: number, result: number):
	set {_R} to yaml value "Players.%{_player}%.Points" from "Players"
	set {_RD} to yaml value "Players.%{_player}%.RD" from "Players"
	set {_Ïƒ} to 1

	set {_g} to g({_RD})
	set {_E} to E({_R}, {_OpponentR}, {_g})
	
	# Variance (dSquared)
	set {_dSquared} to (1 / ({_g} * {_g} * {_E} * (1 - {_E})))
	
	# Update RD
	set {_newRD} to updateRD({_RD}, {_dSquared})
	
	# Rating Change
	set {_delta} to ({_g} * ({_result} - {_E}))
	set {_newR} to ({_R} + ({_newRD} * {_newRD} * {_delta}))

	set {_newR} to round({_newR})
	
	# Ensure the new rating doesn't go below 0
	if {_newR} < 0:
		set {_newR} to 0
	
	set {_diff} to ({_newR} - {_R})

	if abs({_diff}) > {_OpponentR}:
		set {_diff} to {_OpponentR}
	
	


	if {_diff} > 0:
		send "&aYou have gained &e%{_diff}% &apoints." to {_player}
	else:
		set {_diff} to abs({_diff})
		broadcast "&aYou have lost &e%{_diff}% &apoints." to {_player}



	# Save the new values
	set yaml value "Players.%{_player}%.Points" from "Players" to {_newR}
	set yaml value "Players.%{_player}%.RD" from "Players" to {_newRD}
	save yaml "Players"


	# Test command to simulate a match result
command /testmatch <offlineplayer> <offlineplayer> <number>:
	description: Test the Glicko-2 rating system with specified players and match result
	permission: admin
	trigger:
		set {_player1} to arg-1
		set {_player2} to arg-2
		set {_result} to arg-3 # 1 for win, 0 for loss, 0.5 for draw

		
		# Validate result
		if {_result} is not 1:
			if {_result} is not 0:
				if {_result} is not 0.5:
					send "&cInvalid result! Use 1 for win, 0 for loss, or 0.5 for draw." to player
					stop

		# Fetch player data
		set {_R1} to yaml value "Players.%{_player1}%.Points" from "Players"
		set {_RD1} to yaml value "Players.%{_player1}%.RD" from "Players"
		set {_R2} to yaml value "Players.%{_player2}%.Points" from "Players"
		set {_RD2} to yaml value "Players.%{_player2}%.RD" from "Players"
		
		# Check if players exist
		if {_R1} is not set:
			send "&cOne or both players do not exist!" to player
			stop
		if {_R2} is not set:
			send "&cOne or both players do not exist!" to player
			stop

		# Calculate new ratings and RD for both players

		# Update player1 and player2

		calculateNewRating({_player1}, {_R2}, {_result})
		calculateNewRating({_player2}, {_R1}, (1 - {_result}))  # Opponent result is the inverse

		# Confirm update
		send "&aMatch result has been processed and ratings updated." to player